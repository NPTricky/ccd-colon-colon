<?xml version="1.0"?>
<!-- 
  Bei weiteren Ant Fragen oder Problemen schreibt mir 
  eine Mail an jan.duewel@st.ovgu.de oder besucht mich 
  in meinem BÃ¼ro in GebÃ¤ude 18 Raum 213.
-->
<project name="jchess" default="main" basedir=".">
  <!-- Sets variables which can later be used. -->
  <!-- The value of a property is accessed via ${} -->
  <property name="src.dir" location="." />
  <property name="build.dir" location="bin" />
  <property name="dist.dir" location="dist" />
  <property name="library.dir" location="ext" />
  <property name="reports.dir" location="reports" />
  <property name="junit.output.dir" location="${reports.dir}/junit" />
  <property name="instrumented.dir" location="instrumented" />
  <property name="coverage.xml.dir" location="${reports.dir}/cobertura-xml" />
  <property name="coverage.summaryxml.dir" location="${reports.dir}/cobertura-summary-xml" />
  <property name="coverage.html.dir" location="${reports.dir}/cobertura-html" />
  
  <!-- cobertura setup -->    
  <path id="cobertura.classpath">
    <fileset dir="${library.dir}/cobertura">
      <include name="cobertura*.jar" />
      <include name="lib/**/*.jar" />
    </fileset>
  </path>

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/> 
    
  <!-- including junit library and the library for the gui -->  
  <path id="files-classpath">
    <fileset dir="${library.dir}" >
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <!-- pmd related config -->  
  <property name="pmd.dir" location="${library.dir}/pmd-bin" />
    
  <path id="pmd.classpath">
    <fileset dir="${pmd.dir}">
      <include name="lib/**/*.jar" />
    </fileset>
  </path>
  
  <target name="pmd">
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath"/>
    <pmd rulesetfiles="rulesets/internal/all-java.xml">
      <formatter type="xml" toFile="${reports.dir}/pmd_report.xml"/>
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </pmd>
  </target>
  
  <!-- findbugs setup-->
  <property name="findbugs.dir" location="${library.dir}/findbugs" /> 
  
  <path id="findbugs.classpath">
    <fileset dir="${findbugs.dir}">
      <include name="lib/**/*.jar" />
    </fileset>
  </path>
  
  <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.classpath"/> 
   
  <target name="findbugs" depends="jar">
    <findbugs home="${findbugs.dir}" output="xml" outputFile="${reports.dir}/findbugs_report.xml" >
      <sourcePath path="${src.dir}" />
      <class location="${src.dir}/dist/jChess.jar" />
      <auxclasspath refid="files-classpath"/>
    </findbugs>
  </target> 
  
  <!-- checkstyle setup -->
  <property name="checkstyle.dir" location="${library.dir}/checkstyle" />
  
  <path id="checkstyle.classpath">
      <fileset dir="${checkstyle.dir}">
          <include name="*.jar" />
      </fileset>
  </path>
  
  <taskdef resource="checkstyletask.properties" classpathref="checkstyle.classpath"/>
  
  <target name="checkstyle" description="Generates a report of code convention violations.">

    <checkstyle config="${checkstyle.dir}/checkstyle_checks.xml" failOnViolation="false" >
      <formatter type="xml" tofile="${reports.dir}/checkstyle_report.xml"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
    </checkstyle>
    
  </target>
  
  <!-- Deletes the directories-->
  <target name="clean">
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${instrumented.dir}" />
    <delete dir="${reports.dir}" />
    <delete file="cobertura.log" />
    <delete file="cobertura.ser" />
  </target>
  
  <!-- Creates the directories-->
  <target name="makedir">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${instrumented.dir}" />
    <mkdir dir="${coverage.xml.dir}" />
    <mkdir dir="${coverage.summaryxml.dir}" />
    <mkdir dir="${coverage.html.dir}" />
  </target>
  
  
  <!-- cobertura related stuff -->
  <target name="instrument" depends="makedir,compile">
    <!--
      Remove the coverage data file and any old instrumentation.
    -->
    <delete file="cobertura.ser"/>
    <delete dir="${instrumented.dir}" />

    <!--
      Instrument the application classes, writing the
      instrumented classes into ${build.instrumented.dir}.
    -->
    <cobertura-instrument todir="${instrumented.dir}">
      <!--
        The following line causes instrument to ignore any
        source line containing a reference to log4j, for the
        purposes of coverage reporting.
      -->
      <ignore regex="org.apache.log4j.*" />

      <fileset dir="${build.dir}">
        <!--
          Instrument all the application classes, but
          don't instrument the test classes.
        -->
        <include name="**/*.class" />
        <exclude name="**/*Test.class" />
      </fileset>
    </cobertura-instrument>
  </target>
  
  <!-- Compiles the java code -->
  <target name="compile" depends="clean, makedir">
    <copy includeemptydirs="false" todir="${build.dir}/jchess">
      <fileset dir="${src.dir}">
        <exclude name="**/*.java"/>
        <exclude name="build.xml"/>
      </fileset>
    </copy>
    <javac srcdir="${src.dir}" destdir="${build.dir}" debug="yes">
      <classpath>
        <path refid="files-classpath" />
        <path refid="cobertura.classpath" />
      </classpath>
    </javac>
  </target>
  
  <!-- Creates the deployable jar file  -->
  <target name="jar" depends="compile">
    <jar destfile="${dist.dir}\jChess.jar" basedir="${build.dir}">
      <manifest>
        <attribute name="Main-Class" value="jchess.JChessApp"/>
      </manifest>
    </jar>
  </target>
  
  <!-- Runs the units tests -->
  <target name="tests" depends="compile">
    <mkdir dir="${junit.output.dir}"/>
  
    <junit fork="yes" printsummary="yes" haltonfailure="yes" >
      <classpath location="${instrumented.dir}" />
      <classpath location="${build.dir}" />
    
      <classpath refid="cobertura.classpath" />
      
      <classpath>
        <pathelement location="${source.dir}"/>
        <pathelement location="${build.dir}"/>
        <path refid="files-classpath"/>
      </classpath>
      
     <formatter type="plain"/>
     <formatter type="xml"/>

     <batchtest todir="${junit.output.dir}">
      <fileset dir="${build.dir}">
         <include name="jchess/tests/*"/>
      </fileset>
     </batchtest> 
     
    </junit>
  </target>
  
  <!-- cobertura reports -->
  <target name="coverage-report">
    <!--
      Generate an XML file containing the coverage data using
      the "srcdir" attribute.
    -->
    <cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
  </target>
  
  <target name="summary-coverage-report">
    <!--
      Generate an summary XML file containing the coverage data using
      the "srcdir" attribute.
    -->
    <cobertura-report srcdir="${src.dir}" destdir="${coverage.summaryxml.dir}" format="summaryXml" />
  </target>
  
  <target name="alternate-coverage-report">
    <!--
      Generate a series of HTML files containing the coverage
      data in a user-readable form using nested source filesets.
    -->
    <cobertura-report destdir="${coverage.html.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>
   
  <!-- Creates the junit reports -->
  <target name="junitreport">
    <junitreport todir="${junit.output.dir}">
      <fileset dir="${junit.output.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${junit.output.dir}"/>
    </junitreport>
  </target>
      
  <target name="main" depends="compile,findbugs,pmd,checkstyle,instrument,jar,tests,junitreport"> 
    <description>Main target</description>
  </target>
    
</project>